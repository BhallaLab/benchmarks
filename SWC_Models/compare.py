"""compare.py: 

Compare data generated by MOOSE and NEURON

"""
    
__author__           = "Dilawar Singh"
__copyright__        = "Copyright 2015, Dilawar Singh and NCBS Bangalore"
__credits__          = ["NCBS Bangalore"]
__license__          = "GNU GPL"
__version__          = "1.0.0"
__maintainer__       = "Dilawar Singh"
__email__            = "dilawars@ncbs.res.in"
__status__           = "Development"

import numpy as np
import pylab

dataDir = '_data'
files = [ '_data/moose.csv', '_data/nrn.csv']
mooseX, mooseY = None, None
nrnX, nrnY = None, None
_analysis = {}

def main():
    global nrnX, nrnY, mooseX, mooseY
    mooseData, nrnData = [np.genfromtxt(x, dtype=float, delimiter=',',skiprows=1) for
            x in files]
    mooseX, mooseY = mooseData.T
    nrnX, nrnY = nrnData.T
    analyze()
    plot()

def countSpikes(vec, threshold=10e-3):
    """Count spike in vector"""
    global nrnX, nrnY, mooseX, mooseY
    startSpike, stopSpike = False, True
    numSpikes = 0
    for x in vec:
        if x >= threshold:
            if not startSpike and stopSpike:
                startSpike, stopSpike = True, False
            else: pass
        else:
            if startSpike and not stopSpike:
                startSpike, stopSpike = False, True
                numSpikes += 1
            else: pass
    return numSpikes

def analyze():
    """Analyze data"""
    global nrnX, nrnY, mooseX, mooseY
    global _analysis
    _analysis['spike count'] = { 'neuron' : countSpikes(nrnY), 'moose' :
        countSpikes(mooseY) } 
    print _analysis


def plot():
    pylab.plot(nrnX, nrnY, label="Neuron")
    pylab.plot(mooseX, mooseY, label="Moose")
    pylab.legend()

    compareFig = 'compare.eps'
    print("Saving comparisions to %s" % compareFig)
    pylab.savefig(compareFig)


if __name__ == '__main__':
    main()
